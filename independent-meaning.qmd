# Argument meaning should be independent {#sec-independent-meaning}

```{r}
#| include = FALSE
source("common.R")
```

## What's the problem?

Avoid having one argument change the interpretation of another argument.
This makes it harder to understand a call, because you might need to re-intepret an earlier argument.
This sort of call is like a [garden path sentence](https://en.wikipedia.org/wiki/Garden-path_sentence), like "The horse raced past the barn fell**"** where your initial understanding of "raced" needs to be modified when you to get to the end of the sentence in order for it to make sense.

## What are some examples?

There aren't many examples of this problem, but it's pretty rare.
I think it's still worth being aware of it so you can avoid in your own code.

-   In `library()` the `character.only` argument changes how the `package` argument is interpreted:

    ```{r}
    #| eval = FALSE
    package <- "dplyr"

    # Loads a package called "package"
    library(package)

    # Loads dplyr
    library(package, character.only = TRUE)
    ```

-   In `install.packages()` setting `repos = NULL` changes the interpretation of `pkgs` from being a vector of package names to a vector of file paths.

-   In `findInterval()` if you set `left.open = TRUE` the `rightmost.closed` means `leftmost.closed`.

## How do I remediate past mistakes?

It's not clear that there's a single solution.
For the examples above:

-   In `library()`, I think this is an example of why base R needs a consistent mechanism for quoting and unquoting.
    If `library()` were a tidyverse function it would use tidy-eval, and so you'd write `library(package)` or `library(!!package)`.
    Another option would be to use the same mechanism as `help()` where `help((topic))` will always look for the topic named by the `topic` variable.

-   In `install.packages()` maybe it would be better to have mutually exclusive `packages` and `paths` arguments?
    Then `repos` only applies to `paths` which might suggest this is an example of the strategy pattern?

-   In `findInterval()` I think I'd fix it by renaming the argument to something that wasn't direction specific.
    Maybe `extemum.closed`?
