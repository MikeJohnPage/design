# Use multiple functions for complex strategies {#sec-strategy-functions}

```{r}
#| include = FALSE
source("common.R")
```

## What's the problem?

You have **complex strategies** when different strategies require different arguments.
In this case, it's a good idea to use a separate function for each strategy, to make it as clear as possible which arguments belong to which strategy.
One sign that you have this pattern that you have a complex dependency between arguments: maybe you can set `a` and `b` and `a` and `c` but not `b` and `c`.
This tends to make the function harder to use because it suggests more viable input combinations than actually exist.

In @sec-strategy-objects we'll consider an extension of this idea you can use either when multiple functions need to use the same strategy, or the strategy is just one part of what the function does.

## What are some examples?

-   `forcats::fct_lump()` chooses between one of three lumping strategies depending on whether you supply just `n`, just `prop`, or neither, while supplying both `n` and `prop` is an error.
    Additionally, the `ties.method` argument only does anything if you supply only `n`.
    `fct_lump()` is hard to understand and document because it's really three smaller functions in a trench coat[^strategy-functions-1].

-   `diag()` is used to both extract the diagonal of a matrix or construct a matrix from its diagonal.
    This combination of purposes makes its arguments hard to understand.

-   `sample()` is used to both randomly reorder a vector and generate a random vector of length `n`.
    This function is particularly troublesome because it picks between the two strategies based on the length of the first argument.

-   `rep()` is used to both repeating each element of a vector and to repeat the complete vector.
    I discuss this more in @sec-cs-rep.

[^strategy-functions-1]: <https://tvtropes.org/pmwiki/pmwiki.php/Main/TotemPoleTrench>

## How do I identify the problem?

Typically this problem arises as the scope of your function grows over time, and because the growth tends to be gradual it's hard to notice exactly when it becomes an issue.
One way to splot this problem is notice that your function consists of a big if statement where the branches share very little code.
An extreme example of this is the base `sample()` function.
As of R 4.3.0 it looks something like this:

```{r}
sample <- function(x, size, replace = FALSE, prob = NULL) {
  if (length(x) == 1L && is.numeric(x) && is.finite(x) && x >= 1) {
    if (missing(size))
      size <- x
    sample.int(x, size, replace, prob)
  } else {
    if (missing(size))
      size <- length(x)
    x[sample.int(length(x), size, replace, prob)]
  }
}
```

You can see that there are two branches that share very little code, and each branch uses a different default value for `size`.
This suggests it might be better to have two functions:

```{r}
sample_vec <- function(x, size = length(x), replace = FALSE, prob = NULL) {
  # check_vector(x)
  # check_number_whole(size)
  
  x[sample.int(length(x), size, replace, prob)]
}

sample_int <- function(x, size = x, replace = FALSE, prob = NULL) {
  # check_number_whole(x)
  # check_number_whole(size)
  
  x[sample.int(length(x), size, replace, prob)]
}
```

In other cases you might spot the problem because you're having trouble explaining the arguments in the documentation.
If it feels like

## How do I remediate past mistakes?

Remediating past mistakes is straightforward: define, document, and export one function for each strategy.
Then rewrite the original function to use those strategies, deprecating that entire function if desired.

```{r}
fct_lump <- function(f,
                     n,
                     prop,
                     w = NULL,
                     other_level = "Other",
                     ties.method = c("min", "average", "first", "last", "random", "max")) {
    if (missing(n) && missing(prop)) {
      fct_lump_lowfreq(f, w = w, other_level = other_level)
    } else if (missing(prop)) {
      fct_lump_n(f, n, w = w, other_level = other_level, ties.method = ties.method)
    } else if (missing(n)) {
      fct_lump_prop(f, prop, w = w, other_level = other_level)
    } else {
      cli::cli_abort("Must supply only one of {.arg n} and {.arg prop}.")
    }
}
```

In forcats we decided to supersede `fct_lump()` rather than deprecating it.
Deprecating it would only require one extra line:

```{r}
fct_lump <- function(...) {
  lifecycle::deprecate_warn("0.5.0", "fct_lump()")
}
```
