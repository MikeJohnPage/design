# Extract strategies into objects {#sec-strategy-objects}

```{r}
#| include = FALSE
source("common.R")
```

## What's the problem?

A more advanced form of this pattern arises when you have many arguments apart from the arguments needed by the different strategies.
One example that we'll explore below is `ggplot2::stat_bin()`.
A key part of `stat_bin()` (which powers `ggplot2::geom_histogram()` is defining the locations of the bins, which currently uses five argument (`binwidth`, `bins`, `breaks`, `boundary`, `center`, `closed`).
But it also has many arguments (e.g. `na.rm`, `orientation`, `show.legend`, \...)

## What are some examples?

-   `grepl()` has boolean `perl` and `fixed` arguments, but you're not really toggling two independent settings, you're picking from one of three regular expression engines (the default, the engine used by Perl, and fixed matches).
    Additionally, the `ignore.case` argument only applies to two of the strategies.
    Learn more in @sec-cs-stringr.

-   `ggplot2::geom_histogram()` has three main strategies for defining the bins: you can supply the number of `bins`, the width of each bin (the `binwidth`), or the exact `breaks`.
    But it's very difficult to tell this from the function specification, and there are complex argument dependencies.

-   `dplyr::left_join()` uses an advanced form of this pattern where the different strategies for joining two data frames together are expressed in a mini-DSL provided by `dplyr::join_by()`.

## How do you use the pattern?

In more complicated cases, different strategies will require different arguments, so you'll need a bit more infrastructure.
The basic idea is build on the options object described in @sec-argument-clutter, but instead of providing just one helper function, you'll provide one function per strategy.
A good example of this approach is readr, which provides `regex()`, `boundary()`, `coll()`, and `fixed()` to pick between four different strategies for matching text.
You can learn more about why we picked that interface in @sec-cs-stringr, so here I wanted to focus on the implementation.

## Selecting a pattern engine {#strategy-objects-sec-pattern-engine}

`grepl()`, has three arguments that take either `FALSE` or `TRUE`: `ignore.case`, `perl`, `fixed`, which might suggest that there are 2 \^ 3 = 8 possible options.
But `fixed = TRUE` overrides `perl = TRUE`, and `ignore.case = TRUE` only works if `fixed = FALSE` so there are only 5 valid combinations.

```{r}
x <- grepl("a", letters, fixed = TRUE, ignore.case = TRUE)
x <- grepl("a", letters, fixed = TRUE, perl = TRUE)
```

It's easier to understand `fixed` and `perl` once you realise their combination is used to pick from one of three engines for matching text:

-   The default is POSIX 1003.2 extended regular expressions.
-   `perl = TRUE` uses Perl-style regular expressions.
-   `fixed = TRUE` uses fixed matching.

This makes it clear why `perl = TRUE` and `fixed = TRUE` isn't permitted: you're trying to pick two conflicting engines.

An alternative interface that makes this choice more clear would be to use @sec-enumerate-options and create a new argument called something like `engine = c("POSIX", "perl", "fixed")`.
This also has the nice feature of making it easier to extend in the future.
That might look something like this:

```{r}
#| eval = FALSE
grepl(pattern, string, engine = "regex")
grepl(pattern, string, engine = "fixed")
grepl(pattern, string, engine = "perl")
```

But stringr takes a different approach, because of a problem hinted at in `grepl()` and friends: `ignore.case` only works with two of the three engines: POSIX and perl.
Additionally, having an `engine` argument that affects the meaning of the `pattern` argument is a little unfortunate --- that means you have to read the call until you see the `engine` argument before you can understand precisely what the `pattern` means.

stringr takes a different approach, encoding the engine as an attribute of the pattern:

```{r}
library(stringr)

x <- str_detect(letters, "a")
# short for:
x <- str_detect(letters, regex("a"))

# Which is where you supply additional arguments
x <- str_detect(letters, regex("a", ignore_case = TRUE))
```

This has the advantage that each engine can take different arguments.
In base R, the only argument of this nature of `ignore.case`, but stringr's `regex()` has arguments like `multiline`, `comments`, and `dotall` which change how some components of the pattern are matched.

Using an `engine` argument also wouldn't work in stringr because of the `boundary()` engine which rather than matching specific patterns uses matches based on boundaries between things like letters or words or sentences.

```{r}
#| eval = FALSE
str_view("This is a sentence.", boundary("word"))
str_view("This is a sentence.", boundary("sentence"))
```

This is more appealing than creating a separate function for each engine because there are many other functions in the same family as `grepl()`.
If we created `grepl_fixed()`, we'd also need `gsub_fixed()`, `regexp_fixed()` etc.

If you take a look at one of these functions, you'll see it's a wrapper around a stringi function that performs a similar job.
But `fixed()` does two extra things compared to `stri_opts_fixed()`: it more aggressively checks the input arguments and it combines the stringi options with the pattern and adds a class.

```{r}
fixed <- function(pattern, ignore_case = FALSE) {
  pattern <- as_bare_character(pattern)
  check_bool(ignore_case)

  options <- stri_opts_fixed(case_insensitive = ignore_case)

  structure(
    pattern,
    options = options,
    class = c("stringr_fixed", "stringr_pattern", "character")
  )
}
```

This class is important because it allows us to check that the user has provided the expect input type and give a useful error message if not.
Since pretty much every stringr function needs to do this, stringr provides a internal function called `type()` that looks something like this[^strategy-objects-1]:

[^strategy-objects-1]: The actual function is more complicated because it takes more care to generate an informative error message, and it uses S3 instead of nested `if` statements.
    But the overall strategy is the same.

```{r}
type <- function(x) {
  if (inherits(x, "stringr_boundary")) {
    "bound"
  } else if (inherits(x, "stringr_regex")) {
    "regex"
  } else if (inherits(x, "stringr_coll")) {
    "coll"
  } else if (inherits(x, "stringr_fixed")) {
    "fixed"
  } else if (is.character(x)) {
    if (identical(x, "")) "empty" else "regex"
  } else {
    cli::cli_abort("Must be a string or stringr pattern object")
  }
}
```

Then individual stringr functions can use `type()` plus a `switch` statement:

```{r}
str_detect <- function(string, pattern) {
  check_lengths(string, pattern)
  check_bool(negate)

  switch(type(pattern),
    empty = no_empty(),    # <1>
    bound = no_boundary(), # <1>
    fixed = stri_detect_fixed(string, pattern, opts_fixed = opts(pattern)),  # <2>
    coll  = stri_detect_coll(string,  pattern, opts_collator = opts(pattern)), # <2>
    regex = stri_detect_regex(string, pattern, opts_regex = opts(pattern)) # <2>
  )
}
```

1.  `no_empty()` and `no_boundary()` are helper functions that generate errors when a stringr function doesn't support a specific engine.
2.  `opts()` is a helper function for extracting the stringi options back out of the stringr wrapper object.

You can implement this same strategy using `if` or OOP, but here I particularly like the `switch` pattern because it keeps the stringi function calls close together, which makes it easier to keep them in sync.

### Using a strategy function {#strategy-objects-sec-geom-histogram}

Sometimes the strategy will be tangled in with many other arguments, or they might be multiple strategies used simultaneously.
In these situations you want to avoid creating a combinatorial explosion of functions, and instead might want to use a strategy object.

For example, generating the bins for a histogram is a surprisingly complex topic.
`ggplot2::stat_bin()`, which powers `ggplot2::geom_histogram()`, has a total of 5 arguments that control where the bins are placed:

-   You can supply either `binwidth` or `bins` to specify either the width or the number of evenly spaced bins. Alternatively, you supply `breaks` to specify the exact bin locations yourself (which allows you to create unevenly sized bins[^strategy-objects-2]).
-   If you use `binwidth` or `bins`, you're specifying the width of each bin, but not where the bins start. So additionally you can use either `boundary` or `center`[^strategy-objects-3] to specify the location of a side (`boundary`) or the middle (`center`) of a bin[^strategy-objects-4]. `boundary` and `center` are mutually exclusive; you can only specify one (see @sec-mutually-exclusive for more).
-   Regardless of the way that you specify the locations of the bins, you need to choose where a bin from `a` to `b`, is `[a, b)` or `(a, b]`, which is the job of the `closed` argument.

[^strategy-objects-2]: One nice application of this principle is to create a histogram where each bin contains (approximately) the same number of points, as implemented in <https://github.com/eliocamp/ggpercentogram/>.

[^strategy-objects-3]: `center` is also a little problematic as an argument name, because UK English would prefer `centre`.
    It's probably ok here since this it's a very rarely used argument, but `middle` would be good alternatives that don't have the same US/UK problem.
    Alternatively the pair could be `endpoint` and `midpoint` which perhaps suggest a tighter pairing than `center` and `boundary`.

[^strategy-objects-4]: It can be any bin; `stat_bin()` will automatically adjust all the other bins.

One way to resolve this problem would encapsulate the three basic strategies into three functions:

-   `bin_width(width, center, boundary, closed)`
-   `bin_number(bins, center, boundary, closed)`
-   `bin_breaks(breaks, closed)`

That immediately makes the relationship between the arguments and the strategies more clear.

Note that these functions create "strategies"; i.e. they don't take the data needed to actual perform the operation --- none of these functions take range of the data.
This makes these functions [function factories](https://adv-r.hadley.nz/function-factories.html), which is a relatively complex technique.

```{r}
bin_width <- function(width, center, boundary, closed = c("left", "right")) {
  # https://adv-r.hadley.nz/function-factories.html#forcing-evaluation
  list(width, center, boundary, closed)
  
  function(range) {
    
  }
}
```

As in @sec-argument-clutter, you may want to give these functions custom classes so that the function that uses them can provide better error messages if the user supplies the wrong type of object.

Alternatively, you might want to just check that the input is a function with the correct formals; that allows the user to supply their own strategy function.
It's probably something that few people will take advantage of, but it's a nice escape hatch.

## How do I remediate past mistakes?

If your function used an enumeration, but now you realise that some strategies use different arguments you can remediate like this:

```{r}
# OLD 
my_fun <- function(strategy = c("a", "b")) {
  strategy <- arg_match(strategy)
}

check_strategy <- function(f) {
  if (!is.function(f) || !identical(names(formals), c("range"))) {
    cli::abort("{.fun f} must be a function with `range` argument")
  }
}


# NEW
my_fun <- function(strategy = my_stragegy_a()) {
  if (is.characer(strategy)) {
    strategy <- switch(
      arg_match(strategy),
      a = my_strategy_a(),
      b = my_strategy_b()
    )
  } else {
    check_strategy(strategy)
  }
}
```
