# Strategies {#sec-strategies-explicit}

```{r}
#| include = FALSE
source("common.R")
library(stringr)
```

## What's the problem?

If your function exposes multiple **implementation strategies**, make those explicit through a single argument that takes an [enumeration](#sec-enumerate-options).
This makes it clear how to control the operation of your function and extends gracefully if you discover new strategies in the future.

It's very easy to violate this pattern because your function often begins by implementing a single strategy, and then later you discover a new strategy.
It's easy to implement this as a Boolean flag or with some argument magic, which leads to problems when you later discover a third strategy.
In this section, you'll see a few ways that you can fix these problems if you discover later that you've made a mistake.

## See also

-   The original [strategy pattern](https://en.wikipedia.org/wiki/Strategy_pattern) defined in [Design Patterns](https://en.wikipedia.org/wiki/Design_Patterns). This pattern has a rather different implementation in a classic OOP language.
